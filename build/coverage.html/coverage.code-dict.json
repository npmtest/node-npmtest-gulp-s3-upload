{"/home/travis/build/npmtest/node-npmtest-gulp-s3-upload/test.js":"/* istanbul instrument in package npmtest_gulp_s3_upload */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-s3-upload/lib.npmtest_gulp_s3_upload.js":"/* istanbul instrument in package npmtest_gulp_s3_upload */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_s3_upload = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_s3_upload = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-s3-upload/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-s3-upload && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_s3_upload */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_s3_upload\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_s3_upload.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_s3_upload.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_s3_upload.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_s3_upload.__dirname + '/lib.npmtest_gulp_s3_upload.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-s3-upload/node_modules/gulp-s3-upload/index.js":"/****\r\n    gulp-s3-upload\r\n    gulp plugin for uploading assets into AWS's S3 service.\r\n****/\r\n\r\nvar es          = require('event-stream')\r\n,   gutil       = require('gulp-util')\r\n,   AWS         = require('aws-sdk')\r\n,   path        = require('path')\r\n,   mime        = require('mime')\r\n,   hasha       = require('hasha')\r\n,   _           = require('underscore')\r\n,   helper      = require('./src/helper.js')\r\n,   PluginError = gutil.PluginError\r\n,   gulpPrefixer\r\n;\r\n\r\nconst PLUGIN_NAME = 'gulp-s3-upload';\r\n\r\ngulpPrefixer = function (AWS) {\r\n\r\n    return function (options, s3conf) {\r\n\r\n        var stream\r\n        ,   _s3         = new AWS.S3(s3conf || {})\r\n        ,   the_bucket  = options.Bucket || options.bucket\r\n        ;\r\n\r\n        if(!the_bucket) {\r\n            throw new PluginError(PLUGIN_NAME, \"Missing S3 bucket name!\");\r\n        }\r\n\r\n        //  Async File Uploading\r\n\r\n        stream = es.map(function (file, callback) {\r\n\r\n            var keyTransform, keyname, keyparts, filename,\r\n                mimetype, mime_lookup_name, hash, nohash\r\n                metadata = null, content_encoding = null\r\n            ;\r\n\r\n            if(file.isNull()) {\r\n                //  Do nothing if no contents\r\n                return callback(null);\r\n            }\r\n\r\n            //  =====================================================\r\n            //  ============= METHOD TRANSFORMS & LOOKUPS ===========\r\n            //  =====================================================\r\n\r\n            //  === Key Transform ===================================\r\n            //  Allow for either keyTransform or nameTransform.\r\n            //  We're using Key to be consistent with AWS-S3.\r\n\r\n            keyTransform = options.keyTransform || options.nameTransform;   // old option name\r\n\r\n            if(keyTransform) {\r\n\r\n                //  Allow the transform function to take the\r\n                //  complete path in case the user wants to change\r\n                //  the path of the file, too.\r\n\r\n                keyname = keyTransform(file.relative);\r\n\r\n            } else {\r\n                // ...Otherwise keep it exactly parallel.\r\n\r\n                keyparts = helper.parsePath(file.relative);\r\n                keyname  = helper.buildName(keyparts.dirname, keyparts.basename + keyparts.extname);\r\n            }\r\n\r\n\r\n            keyname = keyname.replace(/\\\\/g, \"/\"); // JIC Windows (uses backslashes)\r\n\r\n\r\n            // === Mime Lookup/Transform ============================\r\n\r\n            mime_lookup_name = keyname;\r\n\r\n            if (options.mimeTypeLookup) {\r\n                mime_lookup_name = options.mimeTypeLookup(keyname);\r\n            }\r\n\r\n            mimetype = mime.lookup(mime_lookup_name);\r\n\r\n            // === Charset ==========================================\r\n            // JIC text files get garbled. Appends to mimetype.\r\n            // `charset` field gets filtered out later.\r\n\r\n            if (options.charset && mimetype == 'text/html') {\r\n                mimetype += ';charset=' + options.charset;\r\n            }\r\n\r\n            //  === metadataMap =====================================\r\n            //  Map files (using the keyname) to a metadata object.\r\n            //  ONLY if `options.Metadata` is undefined.\r\n            //  ** WILL DEPRICATE IN 2.0.0 **\r\n\r\n            if (_.isFunction(options.metadataMap)) {\r\n                metadata = options.metadataMap;\r\n            } else if(_.isObject(options.metadataMap)) {\r\n                options.Metadata = options.metadataMap;\r\n            }\r\n\r\n            //  *Note: `options.Metadata` is not filtered out later.\r\n\r\n            //  === manualContentEncoding ===========================\r\n            //  Similar to metadataMap to put global / individual\r\n            //  headers on each file object (only if\r\n            //  options.ContentEncoding) is undefined. (1.2)\r\n            //  ** WILL DEPRICATE IN 2.0.0 **\r\n\r\n            if(_.isFunction(options.manualContentEncoding)) {\r\n                content_encoding = options.manualContentEncoding;\r\n            } else if(_.isString(options.manualContentEncoding)) {\r\n                options.ContentEncoding = options.manualContentEncoding;\r\n            }\r\n\r\n            //  Check the file that's up in the bucket already\r\n\r\n            _s3.headObject({\r\n                'Bucket': the_bucket,\r\n                'Key': keyname\r\n            }, function (head_err, head_data) {\r\n\r\n                var obj_opts;\r\n\r\n                //  If object doesn't exist then S3 returns 404 or 403 depending on whether you have s3:ListBucket permission.\r\n                //  See http://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectHEAD.html#rest-object-head-permissions\r\n                if(head_err && !(head_err.statusCode === 404 || head_err.statusCode === 403)) {\r\n                    return callback(new gutil.PluginError(PLUGIN_NAME, \"S3 headObject Error: \" + head_err.stack));\r\n                }\r\n\r\n                //  === ETag Hash Comparison =============================\r\n                //  Do a local hash comparison to reduce\r\n                //  the overhead from calling upload anyway.\r\n                //  Add the option for a different algorithm\r\n                //  JIC for some reason the algorithm is not MD5.\r\n                //  Available algorithms are those available w/ default\r\n                //  node `crypto` plugin. (run `crypto.getCiphers()`)\r\n\r\n                if(!options.etag_hash) {\r\n                    //  If not defined, default to md5. \r\n                    options.etag_hash = 'md5';\r\n                }\r\n\r\n                //  Hashing requires us to have the entire contents of\r\n                //  the file. This is not possible for streams.\r\n                nohash = file.isStream() || options.etag_hash == 'none';\r\n\r\n                hash = nohash ? 'nohash' : hasha(file._contents, {'algorithm': options.etag_hash});\r\n\r\n                if(!nohash && head_data && head_data.ETag === '\"' + hash + '\"') {\r\n\r\n                    //  AWS ETag doesn't match local ETag\r\n                    gutil.log(gutil.colors.gray(\"No Change ..... \"), keyname);\r\n\r\n                    if (options.onNoChange && typeof options.onNoChange === 'function') {\r\n                        options.onNoChange.call(this, keyname);\r\n                    }\r\n\r\n                    callback(null);\r\n\r\n                } else {\r\n\r\n                    /*** FILE \"LOOP\" ***/\r\n\r\n                    obj_opts = _.extend({}, helper.filterOptions(options)); // always make sure clean hash\r\n\r\n                    obj_opts.Bucket     = the_bucket;\r\n                    obj_opts.Key        = keyname;\r\n                    obj_opts.Body       = file.contents;\r\n\r\n                    if(mimetype.length) {\r\n                        //  A check in case of map ContentType\r\n                        obj_opts.ContentType = mimetype;\r\n                    }\r\n\r\n                    if(_.isFunction(metadata)) {\r\n                        // existing obj_opts.Metadata gets overwrriten\r\n                        obj_opts.Metadata = metadata(keyname);\r\n                    }\r\n\r\n                    if(_.isFunction(content_encoding)) {\r\n                        // existing obj_opts.ContentEncoding gets overwrriten\r\n                        obj_opts.ContentEncoding = content_encoding(keyname);\r\n                    }\r\n\r\n                    //  === maps.ParamNames =================================\r\n                    //  This is a new mapper object that, if given in the\r\n                    //  options as `maps.ParamName`, and is a function, will\r\n                    //  run the given function and map that param data, given\r\n                    //  that the return value of the `maps.ParamName` function\r\n                    //  returns the appropriate type for that give putObject Param\r\n                    //  { Bucket: ... maps: { 'CacheControl': function()..., 'Expires': function()... }, etc. }\r\n                    //  See: http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#putObject-property\r\n                    //  This will end up overwriting old Metadata and ContentEncoding\r\n                    //  if they were included in maps hash.\r\n\r\n                    if(!_.isUndefined(options.maps)) {\r\n                        _.each(options.maps, function(mapRoutine, param_name) {\r\n                            if(_.isFunction(mapRoutine)) {\r\n                                obj_opts[param_name] = mapRoutine(keyname);\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    if (options.uploadNewFilesOnly && !head_data || !options.uploadNewFilesOnly) {\r\n\r\n                        //  When using streams, the ContentLength must be\r\n                        //  known to S3. This is only possible if the incoming\r\n                        //  vinyl file somehow carries the byte length.\r\n\r\n                        if (file.isStream()) {\r\n                            if (file.stat) {\r\n                                obj_opts.ContentLength = file.stat.size;\r\n                            } else {\r\n                                return callback(new gutil.PluginError(PLUGIN_NAME, \"S3 Upload of streamObject must have a ContentLength\"));\r\n                            }\r\n                        }\r\n\r\n                        gutil.log(gutil.colors.cyan(\"Uploading ..... \"), keyname);\r\n\r\n                        _s3.putObject(obj_opts, function (err, data) {\r\n\r\n                            if (err) {\r\n                                return callback(new gutil.PluginError(PLUGIN_NAME, \"S3 putObject Error: \" + err.stack));\r\n                            }\r\n\r\n                            if (head_data) {\r\n                                if (head_data.ETag !== data.ETag) {\r\n                                    gutil.log(gutil.colors.yellow(\"Updated ....... \"), keyname);\r\n\r\n                                    if (options.onChange && typeof options.onChange === 'function') {\r\n                                        options.onChange.call(this, keyname);\r\n                                    }\r\n\r\n                                } else {\r\n                                    gutil.log(gutil.colors.gray(\"No Change ..... \"), keyname);\r\n\r\n                                    if (options.onNoChange && typeof options.onNoChange === 'function') {\r\n                                        options.onNoChange.call(this, keyname);\r\n                                    }\r\n                                    \r\n                                }\r\n                            } else {\r\n                                // Doesn't exist in bucket; the object is new to the bucket\r\n                                gutil.log(gutil.colors.green(\"Uploaded! ..... \"), keyname);\r\n\r\n                                if (options.onNew && typeof options.onNew === 'function') {\r\n                                    options.onNew.call(this, keyname);\r\n                                }\r\n                            }\r\n\r\n                            callback(null);\r\n                        });\r\n\r\n                        /*** END FILE LOOP ***/\r\n                    }\r\n                }\r\n            });\r\n        });\r\n\r\n        return stream;\r\n    };\r\n};\r\n\r\n// ===== EXPORTING MAIN PLUGIN FUNCTION =====\r\n// `config` now takes the paramters from the AWS-SDK constructor:\r\n// http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/Config.html#constructor-property\r\n\r\nmodule.exports = function(config, s3_config) {\r\n    var aws_config = {};\r\n\r\n    if(_.isUndefined(config)) {\r\n        config = {};\r\n    }\r\n\r\n    //  Maintain backwards compatibility with legacy key and secret options\r\n    if(config.key) {\r\n        aws_config.accessKeyId = config.key;\r\n    }\r\n\r\n    if(config.secret) {\r\n        aws_config.secretAccessKey = config.secret;\r\n    }\r\n\r\n    //  If using IAM\r\n\r\n    if(_.has(config, 'useIAM') && config.useIAM) {\r\n        config = {};\r\n    }\r\n\r\n    //  Intentionally not mandating the accessKeyId and secretAccessKey as they\r\n    //  will be loaded automatically by the SDK from either environment variables\r\n    //  or the credentials file.\r\n    //  http://docs.aws.amazon.com/AWSJavaScriptSDK/guide/node-configuring.html\r\n\r\n    // Configure the proxy if an environment variable is present.\r\n\r\n    if(process.env.HTTPS_PROXY) {\r\n        gutil.log(\"Setting https proxy to %s\", process.env.HTTPS_PROXY);\r\n\r\n        if(!aws_config.httpOptions) {\r\n            aws_config.httpOptions = {};\r\n        }\r\n\r\n        var HttpsProxyAgent = require('https-proxy-agent');\r\n\r\n        aws_config.httpOptions.agent = new HttpsProxyAgent(process.env.HTTPS_PROXY);\r\n    }\r\n\r\n    //  Update the global AWS config if we have any overrides\r\n\r\n    AWS.config.update(_.extend({}, config, aws_config));\r\n\r\n    return gulpPrefixer(AWS, s3_config);\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-gulp-s3-upload/node_modules/gulp-s3-upload/src/helper.js":"\"use strict\";\n\nvar Path    = require('path')\n,   _       = require('underscore')\n;\n\nmodule.exports = {\n\n    buildName: function (dirs, filename) {\n        return Path.join(dirs, filename);\n    },\n\n    filterOptions: function (params) {\n        var omit_array = [\n            'Body',\n            'bucket',\n            'charset',\n            'ContentType',\n            'etag_hash',\n            'Key',\n            'keyTransform',\n            'metadataMap',\n            'manualContentEncoding',\n            'maps',\n            'mimeTypeLookup',\n            'nameTransform',\n            'onChange',\n            'onNoChange',\n            'onNew',\n            'uploadNewFilesOnly',\n            'verbose'\n        ];\n\n        return _.omit(params, omit_array);\n    },\n\n    parsePath: function (path) {\n        var extname = Path.extname(path);\n\n        return {\n            'dirname':  Path.dirname(path),\n            'basename': Path.basename(path, extname),\n            'extname':  extname\n        };\n    },\n};\n"}